Index: bin/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>void main() {\n  // Task - 1\n  // Dog dog = Dog();\n  // dog.greets(dog: \"sa\");\n\n  // Task - 2\n  // MovablePoint point = MovablePoint(x: 12, y: 10, xspeed: 10, yspeed: 12);\n  // point.moveUp();\n  // point.moveDown();\n  // point.moveLeft();\n  // point.moveRight();\n  // print(point);\n\n\n  // Task - 3\n  // Invoice invoice = Invoice(id: 1, customer: Customer(1, \"Saidmalik\", 10), amount: 1000);\n  // print(invoice.getAmount());\n  // print(invoice.getCustomerId());\n  // print(invoice.getCustomerName());\n  // print(invoice.getCustomerDiscount());\n  // invoice.setAmount(100);\n  // print(invoice.getAmount());\n  //\n\n\n  // Task - 4\n\n  // Book book = Book(name: \"Muhammadyusuf\", authors: [Author(name: \"Muhammadyusuf\",email: \"abdu778118@gmail.com\", gender: Gender.man)], price: 100000);\n  // book.setQty(12);\n  // print(book.getName());\n  // print(book.getAuthor());\n  // print(book.getPrice());\n  // print(book.getQty());\n\n  // Task - 5\n  Student student = Student(name: \"Muhammadyusuf\", address: \"Farg'ona\", program: \"Porgram\", year: 2003, fee: 10);\n  print(student);\n}\n\n// Task - 1 ---------------------------------------------------------------\nabstract class Animal {\n  late String name;\n  Animal({this.name = \"\"});\n  @override\n  String toString() {\n    return name;\n  }\n}\nabstract class Mammal extends Animal {}\n\nclass Cat extends Mammal {\n\n  void greets() => print(\"Meow\");\n}\nclass Dog extends Mammal {\n  void greets({String dog = \"\"}) {\n    if(dog.isNotEmpty) print(\"Wooof\");\n    else print(\"voof\");\n  }\n}\n\n// Task - 2 ---------------------------------------------------------------\n\nabstract class Movable {\n  void moveUp();\n  void moveDown();\n  void moveLeft();\n  void moveRight();\n\n}\n\nclass MovablePoint implements Movable {\n  int x;\n  int y;\n  int xspeed;\n  int yspeed;\n  MovablePoint({\n    required this.x,\n    required this.y,\n    required this.xspeed,\n    required this.yspeed,\n  });\n  @override\n  void moveUp() {\n    y -= yspeed;\n  }\n  @override\n  void moveDown() {\n    y += yspeed;\n  }\n  @override\n  void moveLeft() {\n    x -= xspeed;\n  }\n  @override\n  void moveRight() {\n    x += xspeed;\n  }\n  @override\n  String toString() {\n    return \"x : $x y : $y xspeed : $xspeed, yspeed : $yspeed \";\n  }\n}\n\n\n\n// Task - 3 ---------------------------------------------------------------\nclass Customer {\n  int id;\n  String name;\n  int discount;\n  Customer(\n    this.id,\n    this.name,\n    this.discount,\n  );\n}\nclass Invoice {\n  int id;\n  Customer customer;\n  double amount;\n\n  Invoice({\n    required this.id,\n    required this.customer,\n    required this.amount,\n});\n\n  int getId() => id;\n  Customer getCuStomer() => customer;\n  void setCustomer(Customer customers) => customer = customers;\n  double getAmount() => amount;\n  void setAmount(double amounts) => amount = amounts;\n  int getCustomerId() => customer.id;\n  String getCustomerName() => customer.name;\n  int getCustomerDiscount() => customer.discount;\n  double getAmountAfterDiscount() => amount - customer.discount;\n  @override\n  String toString() {\n    return 'Invoice{id: $id, customer: $customer, amount: $amount}';\n  }\n}\n\n// Task - 4 ---------------------------------------------------------------\nenum Gender {\n  man,\n  woman;\n}\n\nclass Author {\n  String name;\n  String email;\n  Gender gender;\n  Author({this.name = \"\", this.email = \"\", this.gender = Gender.man});\n}\n\nclass Book {\n  String name;\n  List<Author> authors = [];\n  double price;\n  int qty = 0;\n\n  Book(\n      {required this.name,\n      required this.authors,\n      required this.price,\n      this.qty = 0});\n\n  String getName() => name;\n\n  List<Author> getAuthor() => authors;\n\n  double getPrice() => price;\n\n  void setPrice(double priceTwo) => price = priceTwo;\n  int getQty() => qty;\n  void setQty(int qtyTwo) => qty = qtyTwo;\n  String getAuthorName() => authors.map((e) => e.name).toString();\n\n  @override\n  String toString() {\n    return 'Book{name: $name, authors: $authors, price: $price, qty: $qty}';\n  }\n}\n\n// Task - 5 ---------------------------------------------------------------\n\nclass Person {\n  String name;\n  String address;\n\n  Person({\n    required this.name,\n    required this.address,\n});\n  String getName() => name;\n  String getAddress() => address;\n  void setAdrress(String adress) => address = adress;\n\n  @override\n  String toString() {\n    return 'Person{name: $name, address: $address}';\n  }\n}\nclass Student extends Person {\n  String program;\n  int year;\n  double fee;\n\n  Student({\n    required super.name,\n    required super.address,\n    required this.program,\n    required this.year,\n    required this.fee,\n});\n  void getProgram() => program;\n  void getYear() => year;\n  void getFee() => fee;\n\n  void setProgram(String programm) => program = programm;\n  void setYear(int years) => year = years;\n  void setFee(double fe) => fee = fe;\n\n  @override\n  String toString() {\n    return 'Student{name : $name, address: $address, program: $program, year: $year, fee: $fee}';\n  }\n}\n\nclass Staff extends Person {\n  String school;\n  double pay;\n  Staff({\n    required super.name,\n    required super.address,\n    required this.school,\n    required this.pay,\n  });\n  void getSchool() => school;\n  void getPay() => pay;\n\n  void setSchool(String schol) => school = schol;\n  void setPay(double payy) => pay = payy;\n\n  @override\n  String toString() {\n    return 'Staff{name : $name, address: $address, school: $school, pay: $pay}';\n  }\n}\n\n// Task - 6 ---------------------------------------------------------------\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bin/main.dart b/bin/main.dart
--- a/bin/main.dart	(revision 6aa1c76ad8bc066cb076598501f95309e39930bf)
+++ b/bin/main.dart	(date 1678332245491)
@@ -226,30 +226,4 @@
   String toString() {
     return 'Student{name : $name, address: $address, program: $program, year: $year, fee: $fee}';
   }
-}
-
-class Staff extends Person {
-  String school;
-  double pay;
-  Staff({
-    required super.name,
-    required super.address,
-    required this.school,
-    required this.pay,
-  });
-  void getSchool() => school;
-  void getPay() => pay;
-
-  void setSchool(String schol) => school = schol;
-  void setPay(double payy) => pay = payy;
-
-  @override
-  String toString() {
-    return 'Staff{name : $name, address: $address, school: $school, pay: $pay}';
-  }
-}
-
-// Task - 6 ---------------------------------------------------------------
-
-
-
+}
\ No newline at end of file
Index: lib/service/color_service.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/service/color_service.dart b/lib/service/color_service.dart
new file mode 100644
--- /dev/null	(date 1678332245541)
+++ b/lib/service/color_service.dart	(date 1678332245541)
@@ -0,0 +1,33 @@
+// Color color = Color();
+// class Color {
+//   String red(Object text) => "\x1B[31m $text \x1B[0m";
+// }
+// extension Colors on String {
+//   String get red => "\x1B[31m ${this} \x1B[0m";
+// }
+//
+//
+// void printColor(String text){
+//   String newText = text;
+//   var red = RegExp(r'(/([a-z A-Z]*)(.red))');
+//   var yellow = RegExp(r'(/([a-z A-Z]*)(.yellow))');
+//
+//   newText = newText.replaceAllMapped(red,(match) =>"\x1B[31m${match.group(2).toString()}\x1B[0m");
+//   newText = newText.replaceAllMapped(yellow,(match) =>"\x1B[33m${ match.group(2).toString()}\x1B[0m");
+//   print(newText);
+// }
+
+
+
+
+extension TextColorChecker on String {
+  String get check {
+    String newText = this;
+    var red = RegExp(r'(/([a-z A-Z 0-9 ! @ #  % ^ & * ( ) \.]*)(\.red))');
+    var yellow = RegExp(r'(/([a-z A-Z 0-9 ! @ #  % ^ & * ( ) \.]*)(\.yellow))');
+
+    newText = newText.replaceAllMapped(red,(match) =>"\x1B[31m${match.group(2).toString()}\x1B[0m");
+    newText = newText.replaceAllMapped(yellow,(match) =>"\x1B[33m${ match.group(2).toString()}\x1B[0m");
+    return newText;
+  }
+}
\ No newline at end of file
Index: lib/service/io_service.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/service/io_service.dart b/lib/service/io_service.dart
new file mode 100644
--- /dev/null	(date 1678332245535)
+++ b/lib/service/io_service.dart	(date 1678332245535)
@@ -0,0 +1,7 @@
+IOService io = IOService();
+class IOService {
+  void printColor(String text){
+    var regex = RegExp(r'w+(.red)');
+    print(regex.allMatches(text).map((e) => e.group(0)));
+  }
+}
\ No newline at end of file
